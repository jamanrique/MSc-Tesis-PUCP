library(rgl)
library(tidyverse)
library(ggridges)
library(ggpubr)
library(latex2exp)
library(gridExtra)
install.packages(c("latex2exp", "rgl"))
library(rgl)
library(tidyverse)
library(ggridges)
library(ggpubr)
library(latex2exp)
library(gridExtra)
mtweibull <- function(qt, alpha, t) {
ct = (-log(1-t))^(1/alpha)
mt = ((qt) / (ct)) * gamma(1 + 1 / alpha)
return(mt)
}
mtweibull <- function(qt, alpha, t) {
ct = (-log(1-t))^(1/alpha)
mt = ((qt) / (ct)) * gamma(1 + 1 / alpha)
return(mt)
}
mtweibull(4,3,0.5)
mtweibull(4,4,0.5)
mtweibull(2,4,0.5)
mtweibull(3,4,0.5)
mtweibull(3,4,0.9)
mtweibull(4,6,0.5)
mtweibull(7,6,0.5)
mtweibull(7,2,0.5)
mtweibull(7,1,0.5)
mtweibull(0.1,1,0.5)
mtweibull(0.1,10,0.5)
mtweibull(4,10,0.5)
rm(list=ls())
rtweibull = function(n, qt, alpha, t) {
## Reparametrizaci?n de los datos a la f?rmula b?sica de Weibull en R ##
beta = qt / (-log(1 - t)) ^ (1 / alpha)
qm = rweibull(n = n, scale = beta, shape = alpha)
return(qm)
}
dtweibull <- function(value, qt, alpha, t) {
ct = (-log(1 - t)) ^ (1 / alpha)
b = qt / ct
a = alpha
dt = dweibull(x = value, shape = a,scale =  b)
return(dt)
}
seq_qt <- seq(1,10,length.out = 5)
seq_tau <- seq(0.1,0.9,length.out = 5)
alpha <- 1
n <- 10000
densityplot <- function(n,qt,tau,alpha,xlim1,xlim2){
dens <- data.frame(x=rtweibull(n = n,qt = qt,alpha = alpha,t = tau))
dens.mean <- data.frame(y=mean(dens$x))
gg <- ggplot(dens,
aes(x=x)) +
geom_density(color="black",fill="firebrick",alpha=0.8) +
xlim(c(xlim1,xlim2))+
labs(y="Densidad",
x = "y",
title = (paste("Y \U0007E W\U01D63(Qt = ",qt,", \U003B1 = ",alpha,"); \U003C4 =",tau,sep = "")),
subtitle = "Simulación de 10,000 valores")+
theme(plot.title = element_text(face="bold",hjust=1,size=10),
plot.subtitle = element_text(face="italic",hjust=1,size=8),
panel.background = element_rect(fill = "gray90"),
panel.grid.major = element_line(color = "gray40", size = .25),
panel.grid.minor = element_line(color = "gray70", size = .25),
axis.title = element_text(size=8))
return(gg)
}
gg_plots <- list()
for (qt in 1:length(seq_qt)) {
for(t in 1:length(seq_tau)){
gg_plots <- append(gg_plots,list(densityplot(n,seq_qt[qt],seq_tau[t],2,0,5)))
}
}
plot_grid <- do.call(grid.arrange,gg_plots)
seq_alpha <- seq(1,10,length.out = 5)
gg_plots_a <- list()
for (qt in 1:length(seq_alpha)) {
for(t in 1:length(seq_tau)){
gg_plots_a <- append(gg_plots_a,list(densityplot(n,2,seq_tau[t],seq_alpha[qt],0,20)))
}
}
gg_plots <- list()
for (qt in 1:length(seq_qt)) {
for(t in 1:length(seq_tau)){
gg_plots <- append(gg_plots,list(densityplot(n,seq_qt[qt],seq_tau[t],2,0,20)))
}
}
plot_grid <- do.call(grid.arrange,gg_plots)
warnings()
densityplot <- function(n,qt,tau,alpha,xlim1,xlim2){
dens <- data.frame(x=rtweibull(n = n,qt = qt,alpha = alpha,t = tau))
dens.mean <- data.frame(y=mean(dens$x))
gg <- ggplot(dens,
aes(x=x)) +
geom_density(color="black",fill="firebrick",alpha=0.8) +
xlim(c(xlim1,xlim2))+
labs(y="Densidad",
x = "y",
title = (paste("Y \U0007E W\U01D63(Qt = ",qt,", \U003B1 = ",alpha,"); \U003C4 =",tau,sep = "")),
subtitle = "Simulación de 10,000 valores")+
theme(plot.title = element_text(face="bold",hjust=1,size=10),
plot.subtitle = element_text(face="italic",hjust=1,size=8),
panel.background = element_rect(fill = "gray90"),
panel.grid.major = element_line(color = "gray40", size = .25),
panel.grid.minor = element_line(color = "gray70", size = .25),
axis.title = element_text(size=8))
return(gg)
}
gg_plots <- list()
for (qt in 1:length(seq_qt)) {
for(t in 1:length(seq_tau)){
gg_plots <- append(gg_plots,list(densityplot(n,seq_qt[qt],seq_tau[t],2,0,25)))
}
}
plot_grid <- do.call(grid.arrange,gg_plots)
gg_plots <- list()
for (qt in 1:length(seq_qt)) {
for(t in 1:length(seq_tau)){
gg_plots <- append(gg_plots,list(densityplot(n,seq_qt[qt],seq_tau[t],2,0,30)))
}
}
plot_grid <- do.call(grid.arrange,gg_plots)
mtweibull(4,10,0.5)
mtweibull <- function(qt, alpha, t) {
ct = (-log(1-t))^(1/alpha)
mt = ((qt) / (ct)) * gamma(1 + 1 / alpha)
return(mt)
}
mtweibull(4,10,0.5)
vtweibull <- function(qt, alpha, t) {
ct = (-log(1 - t)) ^ (1 / alpha)
var = ((qt^2) / (ct)) * (gamma(1 + (2 / alpha)) - (gamma(1 + (1 / alpha))) ^ 2)
return(var)
}
vtweibull(4,10,0.5)
mtweibull(4,10,0.5)
vtweibull(4,10,0.5)
vtweibull(4,10,0.1)
vtweibull(10,2,0.1)
mtweibull(10,2,0.9)
mtweibull(10,2,0.2)
vtweibull(10,2,0.2)
vtweibull(10,2,0.3)
mtweibull(10,2,0.3)
mtweibull(10,2,0.6)
vtweibull(10,2,0.6)
mtweibull(10,2,0.5)
mtweibull(10,2,0.1)
vtweibull(10,2,0.1)
mtweibull <- function(qt, alpha, t) {
ct = (-log(1-t))^(1/alpha)
mt = ((qt) / (ct)) * gamma(1 + 1 / alpha)
return(mt)
}
mtweibull(10,2,0.1)
vtweibull(10,2,0.1)
mtweibull(10,2,0.1)
vtweibull(10,2,0.1)
rm(list=ls())
library(gamlss)
library(gamlss.cens)
library(haven)
library(tidyverse)
library(BB)
library(matrixStats)
gen.cens(family="WEI3",type="interval")
Ct = function(alpha, tau){
(-log(1-tau))^(1/alpha)
}
Ct = function(alpha, tau){
(-log(1-tau))^(1/alpha)
}
F_Wr = function(Y,Qt,alpha,tau){
B = Qt/Ct(alpha,tau)
pweibull(Y,shape=alpha,scale=B)
}
rm(list=ls())
library(gamlss)
library(gamlss.cens)
library(haven)
library(tidyverse)
library(BB)
library(matrixStats)
gen.cens(family="WEI3",type="interval")
Ct = function(alpha, tau){
(-log(1-tau))^(1/alpha)
}
F_Wr = function(Y,Qt,alpha,tau){
B = Qt/Ct(alpha,tau)
pweibull(Y,shape=alpha,scale=B)
}
Qt_b = function(betas, df){
Qt_c = exp(as.matrix(df[['matriz.diseno']]) %*% betas)
return(Qt_c)
}
Qt_a = function(betas, df){
Qt_c = exp(as.matrix(df) %*% betas)
return(Qt_c)
}
Rand_Wr = function(n,Qt,alpha,tau){
B = Qt/Ct(alpha,tau)
rweibull(n,shape = alpha,scale = B)
}
Simulation = function(n){
X1 = rnorm(n,2,0.25)
X2 = rbeta(n,2,3)
X3 = rgamma(n,2,20)
df = data.frame(X1 = X1, X2 = X2, X3 = X3)
return(df)
}
DF_Simulation = function(df,betas,alpha,tau){
M = dim(df)[1]
design_matrix = model.matrix(~ . ,df)
Qt_i = Qt_a(betas,design_matrix)
Y = c()
for (j in 1:M) {
Y=rbind(Y,Rand_Wr(1,Qt_i[j],alpha,tau))
}
min_Y = floor(min(Y))
Q8_Y = round(quantile(Y,0.8),2)
interval = round((Q8_Y-min_Y) / 6,2)
seq_interv = c(seq(min_Y,Q8_Y,interval),Inf)
Ls = c()
for (u in 1:length(Y)) {
for (n in 1:length(seq_interv)) {
if (Y[u] <seq_interv[n]) {
Ls[u] = seq_interv[n]
break
}}}
Li = c()
for (p in 1:length(Y)) {
for (w in 1:length(seq_interv)) {
if (Y[p] > rev(seq_interv)[w]) {
Li[p] = rev(seq_interv)[w]
break
}}}
F_df = cbind(data.frame(Li = round(Li,2), Ls = round(Ls,2)),df)
return(F_df)
}
data_mgmt = function(data,li,lf){
df_inf = data[,li]
df_sup = data[,lf]
covar = as.data.frame(data[,-c(li,lf)])
covar = model.matrix(~. , covar)
lista = list(lim.inferior = df_inf, lim.superior = df_sup, matriz.diseno = covar)
return(lista)
}
likelihood = function(param,betas,df,tau){
n = length(param)-1
for(i in 1:n){betas[i]=param[i]}
alpha = param[length(param)]
Qt_i = Qt_b(betas,df)
-sum(log(F_Wr(df[['lim.superior']],Qt_i,alpha,tau)-F_Wr(df[['lim.inferior']],Qt_i,alpha,tau)))
}
reg_Wr = function(data,li,lf,tau,param){
df = data_mgmt(data,li,lf)
Bs = as.matrix(rep(0,ncol(df[['matriz.diseno']])))
fit_mv = optim(par = param,fn = likelihood,hessian = T,betas=Bs,df=df,tau=tau)
print(fit_mv$convergence)
return(fit_mv)
}
L = 5000
n = c(100,500,1000)
betas_sim = c(7,0.3,0.84,2.5)
alpha_sim = 2
tau_sim = seq(0.1,0.9,0.1)
sim_list= list(n100 = list(), n500 = list(), n1000 = list())
for (j in 1:length(n)) {
for (k in 1:length(tau_sim)) {
for (p in 1:L) {
sim = Simulation(n[j])
df_sim = DF_Simulation(sim,betas_sim,alpha_sim,tau_sim[k])
m0 = gamlss(Surv(Li,Ls,type="interval2")~.,family = WEI3ic,data = na.omit(df_sim))
init = as.vector(c(coef(m0),m0$sigma.coefficients))
sim_list[[j]] = append(sim_list[[j]],list(reg_Wr(data = df_sim,li = 1,lf = 2,tau = tau_sim[k],param = init)))
}
}
}
View(sim_list)
rm(list=ls())
rtweibull = function(n, qt, alpha, t) {
## Reparametrizaci?n de los datos a la f?rmula b?sica de Weibull en R ##
beta = qt / (-log(1 - t)) ^ (1 / alpha)
qm = rweibull(n = n, scale = beta, shape = alpha)
return(qm)
}
rm(list=ls())
rtweibull = function(n, qt, alpha, t) {
## Reparametrizaci?n de los datos a la f?rmula b?sica de Weibull en R ##
beta = qt / (-log(1 - t)) ^ (1 / alpha)
qm = rweibull(n = n, scale = beta, shape = alpha)
return(qm)
}
seq_qt <- seq(1,10,length.out = 5)
seq_tau <- seq(0.1,0.9,length.out = 5)
alpha <- 1
n <- 10000
densityplot <- function(n,qt,tau,alpha,xlim1,xlim2){
dens <- data.frame(x=rtweibull(n = n,qt = qt,alpha = alpha,t = tau))
dens.mean <- data.frame(y=mean(dens$x))
gg <- ggplot(dens,
aes(x=x)) +
geom_density(color="black",fill="firebrick",alpha=0.8) +
xlim(c(xlim1,xlim2))+
labs(y="Densidad",
x = "y",
title = (paste("Y \U0007E W\U01D63(Qt = ",qt,", \U003B1 = ",alpha,"); \U003C4 =",tau,sep = "")),
subtitle = "Simulación de 10,000 valores")+
theme(plot.title = element_text(face="bold",hjust=1,size=10),
plot.subtitle = element_text(face="italic",hjust=1,size=8),
panel.background = element_rect(fill = "gray90"),
panel.grid.major = element_line(color = "gray40", size = .25),
panel.grid.minor = element_line(color = "gray70", size = .25),
axis.title = element_text(size=8))
return(gg)
}
gg_plots <- list()
for (qt in 1:length(seq_qt)) {
for(t in 1:length(seq_tau)){
gg_plots <- append(gg_plots,list(densityplot(n,seq_qt[qt],seq_tau[t],2,0,30)))
}
}
plot_grid <- do.call(grid.arrange,gg_plots)
mtweibull <- function(qt, alpha, t) {
ct = (-log(1-t))^(1/alpha)
mt = ((qt) / (ct)) * gamma(1 + 1 / alpha)
return(mt)
}
mtweibull(10,2,0.1)
vtweibull(10,2,0.1)
vtweibull <- function(qt, alpha, t) {
ct = (-log(1 - t)) ^ (1 / alpha)
var = ((qt^2) / (ct)) * (gamma(1 + (2 / alpha)) - (gamma(1 + (1 / alpha))) ^ 2)
return(var)
}
mtweibull <- function(qt, alpha, t) {
ct = (-log(1-t))^(1/alpha)
mt = ((qt) / (ct)) * gamma(1 + 1 / alpha)
return(mt)
}
mtweibull(10,2,0.1)
vtweibull(10,2,0.1)
mtweibull(10,2,0.9)
vtweibull(10,2,0.9)
mtweibull(10,2,0.5)
vtweibull(10,2,0.5)
