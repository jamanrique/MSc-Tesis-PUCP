load("C:/Users/jaman/Dropbox/MSc-Tesis-PUCP/03_thesis/02_src/03_simulation/03_simulation_workspace_final.RData")
se_calc <- function(lista) {
ic_contain <- matrix(nrow=0,ncol=5)
for (k in 1:length(lista)) {
little_t <- lista[[k]]
ic <- rbind( little_t$par - qnorm(0.975) * sqrt(diag(solve(little_t$hessian))),
little_t$par + qnorm(0.975) * sqrt(diag(solve(little_t$hessian))))
ic_contain <- rbind(ic_contain,cbind(between(betas_sim[1],left = ic[1,1],right = ic[2,1]),
between(betas_sim[2],left = ic[1,2],right = ic[2,2]),
between(betas_sim[3],left = ic[1,3],right = ic[2,3]),
between(betas_sim[4],left = ic[1,4],right = ic[2,4]),
between(alpha_sim,left = ic[1,5],right = ic[2,5])))
}
final_df <- as.matrix(t(colSums(ic_contain)/length(lista)))
return(final_df)
}
final_database <- matrix(nrow=0,ncol=5)
seq_t <- seq(1,8,1);seq_t
for (j in 1:length(n)) {
df <- sim_list[[j]]
actual_t <- df[1:5000*seq_t[1]]
vf_df <- se_calc(actual_t)
rownames(vf_df) <- paste("n_",n[j],sep="")
final_database <- rbind(final_database,vf_df)
for (l in 1:length(seq_t)) {
actual_t <-  df[(5000*seq_t[l]+1):(5000*(seq_t[l]+1))]
vf_df <- se_calc(actual_t)
rownames(vf_df) <- paste("n_",n[j],sep="")
final_database <- rbind(final_database,vf_df)
}
}
library(gamlss)
library(gamlss.cens)
library(haven)
library(tidyverse)
library(BB)
library(matrixStats)
library(gridExtra)
library(numDeriv)
library(pracma)
library(ucminf)
library(nloptr)
library(ggthemes)
se_calc <- function(lista) {
ic_contain <- matrix(nrow=0,ncol=5)
for (k in 1:length(lista)) {
little_t <- lista[[k]]
ic <- rbind( little_t$par - qnorm(0.975) * sqrt(diag(solve(little_t$hessian))),
little_t$par + qnorm(0.975) * sqrt(diag(solve(little_t$hessian))))
ic_contain <- rbind(ic_contain,cbind(between(betas_sim[1],left = ic[1,1],right = ic[2,1]),
between(betas_sim[2],left = ic[1,2],right = ic[2,2]),
between(betas_sim[3],left = ic[1,3],right = ic[2,3]),
between(betas_sim[4],left = ic[1,4],right = ic[2,4]),
between(alpha_sim,left = ic[1,5],right = ic[2,5])))
}
final_df <- as.matrix(t(colSums(ic_contain)/length(lista)))
return(final_df)
}
final_database <- matrix(nrow=0,ncol=5)
seq_t <- seq(1,8,1);seq_t
for (j in 1:length(n)) {
df <- sim_list[[j]]
actual_t <- df[1:5000*seq_t[1]]
vf_df <- se_calc(actual_t)
rownames(vf_df) <- paste("n_",n[j],sep="")
final_database <- rbind(final_database,vf_df)
for (l in 1:length(seq_t)) {
actual_t <-  df[(5000*seq_t[l]+1):(5000*(seq_t[l]+1))]
vf_df <- se_calc(actual_t)
rownames(vf_df) <- paste("n_",n[j],sep="")
final_database <- rbind(final_database,vf_df)
}
}
final_database <- as.data.frame(final_database)
final_database_vf <- cbind(
Cuantil = rep(c('0.1','0.2','0.3','0.4','0.5','0.6','0.7','0.8','0.9'),3),
B1 = c(rep(100,9),rep(500,9),rep(1000,9)),
final_database)
v1 <- ggplot(data = final_database_vf) +
geom_point(aes(x=B1,y=V1,color=Cuantil,group=Cuantil),size=2) +
scale_color_brewer(palette = "YlOrRd") +
labs(x="Tamaño de Muestra", y="Cobertura",title = "Cobertura para \U003B2_0") +
scale_y_continuous(limits=c(0.93,0.96)) +
scale_x_continuous(breaks=c(100,500,1000)) +
geom_hline(yintercept=0.95,linetype="dashed",color="red")+
theme_minimal() +
theme(legend.position="bottom")
v2 <- ggplot(data = final_database_vf) +
geom_point(aes(x=B1,y=V2,color=Cuantil,group=Cuantil),size=2) +
scale_color_brewer(palette = "YlOrRd") +
labs(x="Tamaño de Muestra", y="Cobertura",title = "Cobertura para \U003B2_1") +
scale_y_continuous(limits=c(0.93,0.96)) +
scale_x_continuous(breaks=c(100,500,1000)) +
geom_hline(yintercept=0.95,linetype="dashed",color="red")+
theme_minimal() +
theme(legend.position="bottom")
v3 <- ggplot(data = final_database_vf) +
geom_point(aes(x=B1,y=V3,color=Cuantil,group=Cuantil),size=2) +
scale_color_brewer(palette = "YlOrRd") +
labs(x="Tamaño de Muestra", y="Cobertura",title = "Cobertura para \U003B2_2") +
scale_y_continuous(limits=c(0.93,0.96)) +
scale_x_continuous(breaks=c(100,500,1000)) +
geom_hline(yintercept=0.95,linetype="dashed",color="red")+
theme_minimal() +
theme(legend.position="bottom")
v4 <- ggplot(data = final_database_vf) +
geom_point(aes(x=B1,y=V4,color=Cuantil,group=Cuantil),size=2) +
scale_color_brewer(palette = "YlOrRd") +
labs(x="Tamaño de Muestra", y="Cobertura",title = "Cobertura para \U003B2_3") +
scale_y_continuous(limits=c(0.93,0.96)) +
scale_x_continuous(breaks=c(100,500,1000)) +
geom_hline(yintercept=0.95,linetype="dashed",color="red")+
theme_minimal() +
theme(legend.position="bottom")
v5 <- ggplot(data = final_database_vf) +
geom_point(aes(x=B1,y=V5,color=Cuantil,group=Cuantil),size=2) +
scale_color_brewer(palette = "YlOrRd") +
labs(x="Tamaño de Muestra", y="Cobertura",title = "Cobertura para \U003B1") +
scale_y_continuous(limits=c(0.93,0.96)) +
scale_x_continuous(breaks=c(100,500,1000)) +
geom_hline(yintercept=0.95,linetype="dashed",color="red")+
theme_minimal() +
theme(legend.position="bottom")
ggpubr::ggarrange(v1,v2,v3,v4,v5)
ses_calc <- function(lista) {
ic_contain <- matrix(nrow=0,ncol=5)
for (k in 1:length(lista)) {
little_t <- lista[[k]]
ecm <- (little_t$par - c(betas_sim,alpha_sim))
ic_contain <- rbind(ic_contain,ecm)
}
final_df <- as.matrix(t(colSums(ic_contain)/length(lista)))
return(final_df)
}
final_database <- matrix(nrow=0,ncol=5)
seq_t <- seq(1,8,1);seq_t
for (j in 1:length(n)) {
df <- sim_list[[j]]
actual_t <- df[1:5000*seq_t[1]]
vf_df <- ses_calc(actual_t)
rownames(vf_df) <- paste("n_",n[j],sep="")
final_database <- rbind(final_database,vf_df)
for (l in 1:length(seq_t)) {
actual_t <-  df[(5000*seq_t[l]+1):(5000*(seq_t[l]+1))]
vf_df <- ses_calc(actual_t)
rownames(vf_df) <- paste("n_",n[j],sep="")
final_database <- rbind(final_database,vf_df)
}
}
final_database <- as.data.frame(final_database)
final_database_vf <- cbind(
Cuantil = rep(c('0.1','0.2','0.3','0.4','0.5','0.6','0.7','0.8','0.9'),3),
B1 = c(rep(100,9),rep(500,9),rep(1000,9)),
final_database)
v1 <- ggplot(data = final_database_vf) +
geom_line(aes(x=B1,y=V1,color=Cuantil,group=Cuantil),size=1) +
scale_color_brewer(palette = "YlOrRd") +
labs(x="Tamaño de Muestra", y="Sesgo",title = "Sesgo para \U003B2_0") +
geom_hline(yintercept=0.0,linetype="dashed",color="black") +
scale_x_continuous(breaks=c(100,500,1000)) +
scale_y_continuous(limits=c(-0.025,0.025)) +
theme_minimal() +
theme(legend.position="bottom")
v1 <- ggplot(data = final_database_vf) +
geom_line(aes(x=B1,y=V1,color=Cuantil,group=Cuantil),size=1) +
scale_color_brewer(palette = "YlOrRd") +
labs(x="Tamaño de Muestra", y="Sesgo Relativo",title = "Sesgo Relativo para \U003B2_0") +
geom_hline(yintercept=0.0,linetype="dashed",color="black") +
scale_x_continuous(breaks=c(100,500,1000)) +
scale_y_continuous(limits=c(-0.025,0.025)) +
theme_minimal() +
theme(legend.position="bottom")
v2 <- ggplot(data = final_database_vf) +
geom_line(aes(x=B1,y=V2,color=Cuantil,group=Cuantil),size=1) +
scale_color_brewer(palette = "YlOrRd") +
labs(x="Tamaño de Muestra", y="Sesgo Relativo",title = "Sesgo Relativo para \U003B2_1") +
geom_hline(yintercept=0.0,linetype="dashed",color="black") +
scale_x_continuous(breaks=c(100,500,1000)) +
scale_y_continuous(limits=c(-0.025,0.025)) +
theme_minimal() +
theme(legend.position="bottom")
v3 <- ggplot(data = final_database_vf) +
geom_line(aes(x=B1,y=V3,color=Cuantil,group=Cuantil),size=1) +
scale_color_brewer(palette = "YlOrRd") +
labs(x="Tamaño de Muestra", y="Sesgo Relativo",title = "Sesgo Relativo para \U003B2_2") +
geom_hline(yintercept=0.0,linetype="dashed",color="black") +
scale_x_continuous(breaks=c(100,500,1000)) +
scale_y_continuous(limits=c(-0.025,0.025)) +
theme_minimal() +
theme(legend.position="bottom")
v4 <- ggplot(data = final_database_vf) +
geom_line(aes(x=B1,y=V4,color=Cuantil,group=Cuantil),size=1) +
scale_color_brewer(palette = "YlOrRd") +
labs(x="Tamaño de Muestra", y="Sesgo Relativo",title = "Sesgo Relativo para \U003B2_3") +
geom_hline(yintercept=0.0,linetype="dashed",color="black") +
scale_x_continuous(breaks=c(100,500,1000)) +
scale_y_continuous(limits=c(-0.025,0.025)) +
theme_minimal() +
theme(legend.position="bottom")
v5 <- ggplot(data = final_database_vf) +
geom_line(aes(x=B1,y=V5,color=Cuantil,group=Cuantil),size=1) +
scale_color_brewer(palette = "YlOrRd") +
labs(x="Tamaño de Muestra", y="Sesgo Relativo",title = "Sesgo Relativo para \U003B1") +
geom_hline(yintercept=0.0,linetype="dashed",color="black") +
scale_x_continuous(breaks=c(100,500,1000)) +
theme_minimal() +
theme(legend.position="bottom")
ggpubr::ggarrange(v1,v2,v3,v4,v5)
