ifelse(Yh < quantile(Yh,0.75),quantile(Yh,0.50),quantile(Yh,0.70)))),
Ls = ifelse(Yh < quantile(Yh,0.25),quantile(Yh,0.25),
ifelse(Yh <  quantile(Yh,0.5),quantile(Yh,0.5),
ifelse(Yh < quantile(Yh,0.75),quantile(Yh,0.75),quantile(Yh,0.99)))),
X2 =X2,
X3 = X3,
X4 = X4)
fit_sim_0.5  <- append(fit_sim_0.5, list(reg_ces_wei(sim,1,2,t_sim[j])))
print(k)
}
}
reg_ces_wei = function(data, li, lf, t) {
data_l_inf = data[,li]
data_l_sup = data[, lf]
covar = as.matrix(data[, - c(li, lf)])
n = ncol(covar)
d = nrow(covar)
ll = function(param, l_inf,l_fin, t) {
b_0 = 0
b = as.matrix(rep(0, ncol(covar)))
b_0 = param[1]
for (i in 1:n) {b[i] = param[i + 1]}
sigma = param[length(param)]
ct = -(log(1-t))
qt = exp(b_0 + covar %*% b)
s_ll = 0
for (j in 1:d) {
qt_j = qt[j,]
s_ll = s_ll - log(ptweibull(data_l_sup[j], qt_j, sigma, t)- ptweibull(data_l_inf[j], qt_j, sigma, t))
}
return(s_ll)
}
inicial = c(as.vector(coef(lm(data_l_inf~covar,data=data.frame(cbind(data_l_inf,covar))))),1)
fit_mv = nlminb(inicial,ll,l_inf = li, l_fin = lf,t = t,lower = c(rep(0,ncol(covar)+1,0.1)),upper =c(rep(Inf,ncol(covar)+2)))
inicial = fit_mv$par
fit_mv =   optim(par = inicial, method="L-BFGS-B",fn = ll,hessian = T, t = t, upper = c(rep(Inf, ncol(covar) + 2)),lower = c(rep(0, ncol(covar) + 1), 0.01))
return(fit_mv)
}
fit_sim_0.5= list()
M = 100
t_sim = 0.5
for(j in 1:length(t_sim)){
X2 = rbeta(10000,2,3)
X3 = rnorm(10000,3,0.5)
X4 = rgamma(10000,2,4)
b_1 = 0.3
b_2 = 0.6
b_3 = 0.8
sig = 2
Qt  = exp(b_1*X2 + b_2*X3 + b_3*X4)
Yh = c()
for(k in 1:M){
for(i in 1:length(Qt)){Yh[i]= rtweibull(1,Qt[i],sig,t_sim[j])}
sim = data.frame(Li = ifelse(Yh < quantile(Yh,0.25),0,
ifelse(Yh <  quantile(Yh,0.5),quantile(Yh,0.25),
ifelse(Yh < quantile(Yh,0.75),quantile(Yh,0.50),quantile(Yh,0.70)))),
Ls = ifelse(Yh < quantile(Yh,0.25),quantile(Yh,0.25),
ifelse(Yh <  quantile(Yh,0.5),quantile(Yh,0.5),
ifelse(Yh < quantile(Yh,0.75),quantile(Yh,0.75),quantile(Yh,0.99)))),
X2 =X2,
X3 = X3,
X4 = X4)
fit_sim_0.5  <- append(fit_sim_0.5, list(reg_ces_wei(sim,1,2,t_sim[j])))
print(k)
}
}
b_1 = 0.3
b_2 = 0.6
b_3 = 0.8
sig = 2
sesgo = sum(fit_mv_0.5$par - c(0,b_1,b_2,b_3,sig));sesgo
ecm = sum(fit_mv_0.5$par - c(0,b_1,b_2,b_3,sig))**2;ecm
coverage = list(b_1 = list(),b_2=list(),b_3=list(),sig=list())
for(l in 1:M){
pba = fit_sim_0.5[[l]]
b_0_test = pba$par[1] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[1])
b_1_test = pba$par[2] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[2])
b_2_test = pba$par[3] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[3])
b_3_test = pba$par[4] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[4])
sig_test = pba$par[5] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[5])
if (between(b_1,b_1_test[1],b_1_test[2])) {coverage[[1]] = append(coverage[[1]],1)}
if (between(b_2,b_2_test[1],b_2_test[2])) {coverage[[2]] = append(coverage[[2]],1)}
if (between(b_3,b_3_test[1],b_3_test[2])) {coverage[[3]] = append(coverage[[3]],1)}
if (between(sig,sig_test[1],sig_test[2])) {coverage[[4]] = append(coverage[[4]],1)}
}
View(fit_sim_0.5)
View(coverage)
pba = fit_sim_0.5[[3]]
pba$par[3] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[3])
pba$par[4] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[4])
M = 100
t_sim = 0.5
crit=1.96
b_1 = 0.3
b_2 = 0.6
b_3 = 0.8
sig = 2
sesgo = sum(fit_mv_0.5$par - c(0,b_1,b_2,b_3,sig));sesgo
ecm = sum(fit_mv_0.5$par - c(0,b_1,b_2,b_3,sig))**2;ecm
coverage = list(b_1 = list(),b_2=list(),b_3=list(),sig=list())
for(l in 1:M){
pba = fit_sim_0.5[[l]]
b_0_test = pba$par[1] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[1])
b_1_test = pba$par[2] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[2])
b_2_test = pba$par[3] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[3])
b_3_test = pba$par[4] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[4])
sig_test = pba$par[5] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[5])
if (between(b_1,b_1_test[1],b_1_test[2])) {coverage[[1]] = append(coverage[[1]],1)}
if (between(b_2,b_2_test[1],b_2_test[2])) {coverage[[2]] = append(coverage[[2]],1)}
if (between(b_3,b_3_test[1],b_3_test[2])) {coverage[[3]] = append(coverage[[3]],1)}
if (between(sig,sig_test[1],sig_test[2])) {coverage[[4]] = append(coverage[[4]],1)}
}
fit_sim_0.5[[1]]
rm(pba)
for(l in 1:M){
pba = fit_sim_0.5[[l]]
b_0_test = pba$par[1] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[1])
b_1_test = pba$par[2] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[2])
b_2_test = pba$par[3] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[3])
b_3_test = pba$par[4] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[4])
sig_test = pba$par[5] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[5])
if (between(b_1,b_1_test[1],b_1_test[2])) {coverage[[1]] = append(coverage[[1]],1)}
if (between(b_2,b_2_test[1],b_2_test[2])) {coverage[[2]] = append(coverage[[2]],1)}
if (between(b_3,b_3_test[1],b_3_test[2])) {coverage[[3]] = append(coverage[[3]],1)}
if (between(sig,sig_test[1],sig_test[2])) {coverage[[4]] = append(coverage[[4]],1)}
}
fit_sim_0.5[[1]]
View(fit_sim_0.5)
View(pba)
View(coverage)
coverage = list(b_1 = list(),b_2=list(),b_3=list(),sig=list())
for(l in 1:M){
pba = fit_sim_0.5[[l]]
b_0_test = pba$par[1] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[1])
b_1_test = pba$par[2] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[2])
b_2_test = pba$par[3] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[3])
b_3_test = pba$par[4] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[4])
sig_test = pba$par[5] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[5])
if (between(b_1,b_1_test[1],b_1_test[2])) {coverage[[1]] = append(coverage[[1]],1)}
if (between(b_2,b_2_test[1],b_2_test[2])) {coverage[[2]] = append(coverage[[2]],1)}
if (between(b_3,b_3_test[1],b_3_test[2])) {coverage[[3]] = append(coverage[[3]],1)}
if (between(sig,sig_test[1],sig_test[2])) {coverage[[4]] = append(coverage[[4]],1)}
}
View(coverage)
coverage = list(b_1 = list(),b_2=list(),b_3=list(),sig=list())
sesgo = list()
ecm = list()
for(l in 1:M){
pba = fit_sim_0.5[[l]]
b_0_test = pba$par[1] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[1])
b_1_test = pba$par[2] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[2])
b_2_test = pba$par[3] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[3])
b_3_test = pba$par[4] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[4])
sig_test = pba$par[5] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[5])
if (between(b_1,b_1_test[1],b_1_test[2])) {coverage[[1]] = append(coverage[[1]],1)}
if (between(b_2,b_2_test[1],b_2_test[2])) {coverage[[2]] = append(coverage[[2]],1)}
if (between(b_3,b_3_test[1],b_3_test[2])) {coverage[[3]] = append(coverage[[3]],1)}
if (between(sig,sig_test[1],sig_test[2])) {coverage[[4]] = append(coverage[[4]],1)}
sesgo = append(sesgo,sum(pba$par - c(0,b_1,b_2,b_3,sig)))
ecm = append(ecm,sum(pba$par - c(0,b_1,b_2,b_3,sig))**2)
}
View(sesgo)
mean(sesgo)
View(sesgo)
coverage = list(b_1 = list(),b_2=list(),b_3=list(),sig=list())
sesgo = c()
ecm = c()
for(l in 1:M){
pba = fit_sim_0.5[[l]]
b_0_test = pba$par[1] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[1])
b_1_test = pba$par[2] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[2])
b_2_test = pba$par[3] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[3])
b_3_test = pba$par[4] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[4])
sig_test = pba$par[5] + c(-1,1)*crit*sqrt(diag(solve(pba$hessian))[5])
if (between(b_1,b_1_test[1],b_1_test[2])) {coverage[[1]] = append(coverage[[1]],1)}
if (between(b_2,b_2_test[1],b_2_test[2])) {coverage[[2]] = append(coverage[[2]],1)}
if (between(b_3,b_3_test[1],b_3_test[2])) {coverage[[3]] = append(coverage[[3]],1)}
if (between(sig,sig_test[1],sig_test[2])) {coverage[[4]] = append(coverage[[4]],1)}
sesgo = append(sesgo,sum(pba$par - c(0,b_1,b_2,b_3,sig)))
ecm = append(ecm,sum(pba$par - c(0,b_1,b_2,b_3,sig))**2)
}
mean(sesgo)
mean(ecm)
reg_ces_wei = function(data, li, lf, t) {
data_l_inf = data[,li]
data_l_sup = data[, lf]
covar = as.matrix(data[, - c(li, lf)])
n = ncol(covar)
d = nrow(covar)
ll = function(param, l_inf,l_fin, t) {
b_0 = 0
b = as.matrix(rep(0, ncol(covar)))
b_0 = param[1]
for (i in 1:n) {b[i] = param[i + 1]}
sigma = param[length(param)]
ct = -(log(1-t))
qt = exp(b_0 + covar %*% b)
s_ll = 0
for (j in 1:d) {
qt_j = qt[j,]
s_ll = s_ll - log(ptweibull(data_l_sup[j], qt_j, sigma, t)- ptweibull(data_l_inf[j], qt_j, sigma, t))
}
return(s_ll)
}
inicial = c(as.vector(coef(lm(mean(data_l_inf,data_l_sup)~covar,data=data.frame(cbind(data_l_inf,covar))))),1)
fit_mv = nlminb(inicial,ll,l_inf = li, l_fin = lf,t = t,lower = c(rep(0,ncol(covar)+1,0.1)),upper =c(rep(Inf,ncol(covar)+2)))
inicial = fit_mv$par
fit_mv =   optim(par = inicial, method="L-BFGS-B",fn = ll,hessian = T, t = t, upper = c(rep(Inf, ncol(covar) + 2)),lower = c(rep(0, ncol(covar) + 1), 0.01))
return(fit_mv)
}
fit_sim_0.5= list()
M = 1000
t_sim = 0.5
for(j in 1:length(t_sim)){
X2 = rbeta(10000,2,3)
X3 = rnorm(10000,3,0.5)
X4 = rgamma(10000,2,4)
b_1 = 0.3
b_2 = 0.6
b_3 = 0.8
sig = 2
Qt  = exp(b_1*X2 + b_2*X3 + b_3*X4)
Yh = c()
for(k in 1:M){
for(i in 1:length(Qt)){Yh[i]= rtweibull(1,Qt[i],sig,t_sim[j])}
sim = data.frame(Li = ifelse(Yh < quantile(Yh,0.25),0,
ifelse(Yh <  quantile(Yh,0.5),quantile(Yh,0.25),
ifelse(Yh < quantile(Yh,0.75),quantile(Yh,0.50),quantile(Yh,0.70)))),
Ls = ifelse(Yh < quantile(Yh,0.25),quantile(Yh,0.25),
ifelse(Yh <  quantile(Yh,0.5),quantile(Yh,0.5),
ifelse(Yh < quantile(Yh,0.75),quantile(Yh,0.75),quantile(Yh,0.99)))),
X2 =X2,
X3 = X3,
X4 = X4)
fit_sim_0.5  <- append(fit_sim_0.5, list(reg_ces_wei(sim,1,2,t_sim[j])))
print(k)
}
}
reg_ces_wei = function(data, li, lf, t) {
data_l_inf = data[,li]
data_l_sup = data[, lf]
covar = as.matrix(data[, - c(li, lf)])
n = ncol(covar)
d = nrow(covar)
ll = function(param, l_inf,l_fin, t) {
b_0 = 0
b = as.matrix(rep(0, ncol(covar)))
b_0 = param[1]
for (i in 1:n) {b[i] = param[i + 1]}
sigma = param[length(param)]
ct = -(log(1-t))
qt = exp(b_0 + covar %*% b)
s_ll = 0
for (j in 1:d) {
qt_j = qt[j,]
s_ll = s_ll - log(ptweibull(data_l_sup[j], qt_j, sigma, t)- ptweibull(data_l_inf[j], qt_j, sigma, t))
}
return(s_ll)
}
inicial = c(as.vector(coef(lm(avg~covar,data=data.frame(avg=cbind(mean(data_l_inf,data_l_sup),covar))))),1)
fit_mv = nlminb(inicial,ll,l_inf = li, l_fin = lf,t = t,lower = c(rep(0,ncol(covar)+1,0.1)),upper =c(rep(Inf,ncol(covar)+2)))
inicial = fit_mv$par
fit_mv =   optim(par = inicial, method="L-BFGS-B",fn = ll,hessian = T, t = t, upper = c(rep(Inf, ncol(covar) + 2)),lower = c(rep(0, ncol(covar) + 1), 0.01))
return(fit_mv)
}
M = 1000
t_sim = 0.5
for(j in 1:length(t_sim)){
X2 = rbeta(10000,2,3)
X3 = rnorm(10000,3,0.5)
X4 = rgamma(10000,2,4)
b_1 = 0.3
b_2 = 0.6
b_3 = 0.8
sig = 2
Qt  = exp(b_1*X2 + b_2*X3 + b_3*X4)
Yh = c()
for(k in 1:M){
for(i in 1:length(Qt)){Yh[i]= rtweibull(1,Qt[i],sig,t_sim[j])}
sim = data.frame(Li = ifelse(Yh < quantile(Yh,0.25),0,
ifelse(Yh <  quantile(Yh,0.5),quantile(Yh,0.25),
ifelse(Yh < quantile(Yh,0.75),quantile(Yh,0.50),quantile(Yh,0.70)))),
Ls = ifelse(Yh < quantile(Yh,0.25),quantile(Yh,0.25),
ifelse(Yh <  quantile(Yh,0.5),quantile(Yh,0.5),
ifelse(Yh < quantile(Yh,0.75),quantile(Yh,0.75),quantile(Yh,0.99)))),
X2 =X2,
X3 = X3,
X4 = X4)
fit_sim_0.5  <- append(fit_sim_0.5, list(reg_ces_wei(sim,1,2,t_sim[j])))
print(k)
}
for(j in 1:length(t_sim)){
X2 = rbeta(10000,2,3)
X3 = rnorm(10000,3,0.5)
X4 = rgamma(10000,2,4)
b_1 = 0.3
b_2 = 0.6
b_3 = 0.8
sig = 2
Qt  = exp(b_1*X2 + b_2*X3 + b_3*X4)
Yh = c()
for(k in 1:M){
for(i in 1:length(Qt)){Yh[i]= rtweibull(1,Qt[i],sig,t_sim[j])}
sim = data.frame(Li = ifelse(Yh < quantile(Yh,0.25),0,
ifelse(Yh <  quantile(Yh,0.5),quantile(Yh,0.25),
ifelse(Yh < quantile(Yh,0.75),quantile(Yh,0.50),quantile(Yh,0.70)))),
Ls = ifelse(Yh < quantile(Yh,0.25),quantile(Yh,0.25),
ifelse(Yh <  quantile(Yh,0.5),quantile(Yh,0.5),
ifelse(Yh < quantile(Yh,0.75),quantile(Yh,0.75),quantile(Yh,0.99)))),
X2 =X2,
X3 = X3,
X4 = X4)
fit_sim_0.5  <- append(fit_sim_0.5, list(reg_ces_wei(sim,1,2,t_sim[j])))
print(k)
}
}
111
.
,
M = 1000
t_sim = 0.5
for(j in 1:length(t_sim)){
X2 = rbeta(10000,2,3)
X3 = rnorm(10000,3,0.5)
X4 = rgamma(10000,2,4)
b_1 = 0.3
b_2 = 0.6
b_3 = 0.8
sig = 2
Qt  = exp(b_1*X2 + b_2*X3 + b_3*X4)
Yh = c()
for(k in 1:M){
for(i in 1:length(Qt)){Yh[i]= rtweibull(1,Qt[i],sig,t_sim[j])}
sim = data.frame(Li = ifelse(Yh < quantile(Yh,0.25),0,
ifelse(Yh <  quantile(Yh,0.5),quantile(Yh,0.25),
ifelse(Yh < quantile(Yh,0.75),quantile(Yh,0.50),quantile(Yh,0.70)))),
Ls = ifelse(Yh < quantile(Yh,0.25),quantile(Yh,0.25),
ifelse(Yh <  quantile(Yh,0.5),quantile(Yh,0.5),
ifelse(Yh < quantile(Yh,0.75),quantile(Yh,0.75),quantile(Yh,0.99)))),
X2 =X2,
X3 = X3,
X4 = X4)
fit_sim_0.5  <- append(fit_sim_0.5, list(reg_ces_wei(sim,1,2,t_sim[j])))
print(k)
}
}
reg_ces_wei = function(data, li, lf, t) {
data_l_inf = data[,li]
data_l_sup = data[, lf]
covar = as.matrix(data[, - c(li, lf)])
n = ncol(covar)
d = nrow(covar)
ll = function(param, l_inf,l_fin, t) {
b_0 = 0
b = as.matrix(rep(0, ncol(covar)))
b_0 = param[1]
for (i in 1:n) {b[i] = param[i + 1]}
sigma = param[length(param)]
ct = -(log(1-t))
qt = exp(b_0 + covar %*% b)
s_ll = 0
for (j in 1:d) {
qt_j = qt[j,]
s_ll = s_ll - log(ptweibull(data_l_sup[j], qt_j, sigma, t)- ptweibull(data_l_inf[j], qt_j, sigma, t))
}
return(s_ll)
}
lf = rowMeans(data_l_inf,data_l_sup)
inicial = c(as.vector(coef(lm(lfs~covar,data=data.frame(avg=cbind(lf,covar))))),1)
fit_mv = nlminb(inicial,ll,l_inf = li, l_fin = lf,t = t,lower = c(rep(0,ncol(covar)+1,0.1)),upper =c(rep(Inf,ncol(covar)+2)))
inicial = fit_mv$par
fit_mv =   optim(par = inicial, method="L-BFGS-B",fn = ll,hessian = T, t = t, upper = c(rep(Inf, ncol(covar) + 2)),lower = c(rep(0, ncol(covar) + 1), 0.01))
return(fit_mv)
}
fit_sim_0.5= list()
M = 1000
t_sim = 0.5
for(j in 1:length(t_sim)){
X2 = rbeta(10000,2,3)
X3 = rnorm(10000,3,0.5)
X4 = rgamma(10000,2,4)
b_1 = 0.3
b_2 = 0.6
b_3 = 0.8
sig = 2
Qt  = exp(b_1*X2 + b_2*X3 + b_3*X4)
Yh = c()
for(k in 1:M){
for(i in 1:length(Qt)){Yh[i]= rtweibull(1,Qt[i],sig,t_sim[j])}
sim = data.frame(Li = ifelse(Yh < quantile(Yh,0.25),0,
ifelse(Yh <  quantile(Yh,0.5),quantile(Yh,0.25),
ifelse(Yh < quantile(Yh,0.75),quantile(Yh,0.50),quantile(Yh,0.70)))),
Ls = ifelse(Yh < quantile(Yh,0.25),quantile(Yh,0.25),
ifelse(Yh <  quantile(Yh,0.5),quantile(Yh,0.5),
ifelse(Yh < quantile(Yh,0.75),quantile(Yh,0.75),quantile(Yh,0.99)))),
X2 =X2,
X3 = X3,
X4 = X4)
fit_sim_0.5  <- append(fit_sim_0.5, list(reg_ces_wei(sim,1,2,t_sim[j])))
print(k)
}
}
reg_ces_wei = function(data, li, lf, t) {
data_l_inf = data[,li]
data_l_sup = data[, lf]
covar = as.matrix(data[, - c(li, lf)])
n = ncol(covar)
d = nrow(covar)
ll = function(param, l_inf,l_fin, t) {
b_0 = 0
b = as.matrix(rep(0, ncol(covar)))
b_0 = param[1]
for (i in 1:n) {b[i] = param[i + 1]}
sigma = param[length(param)]
ct = -(log(1-t))
qt = exp(b_0 + covar %*% b)
s_ll = 0
for (j in 1:d) {
qt_j = qt[j,]
s_ll = s_ll - log(ptweibull(data_l_sup[j], qt_j, sigma, t)- ptweibull(data_l_inf[j], qt_j, sigma, t))
}
return(s_ll)
}
lf = rowMeans(cbind(data_l_inf,data_l_sup))
inicial = c(as.vector(coef(lm(lfs~covar,data=data.frame(avg=cbind(lf,covar))))),1)
fit_mv = nlminb(inicial,ll,l_inf = li, l_fin = lf,t = t,lower = c(rep(0,ncol(covar)+1,0.1)),upper =c(rep(Inf,ncol(covar)+2)))
inicial = fit_mv$par
fit_mv =   optim(par = inicial, method="L-BFGS-B",fn = ll,hessian = T, t = t, upper = c(rep(Inf, ncol(covar) + 2)),lower = c(rep(0, ncol(covar) + 1), 0.01))
return(fit_mv)
}
M = 1000
t_sim = 0.5
for(j in 1:length(t_sim)){
X2 = rbeta(10000,2,3)
X3 = rnorm(10000,3,0.5)
X4 = rgamma(10000,2,4)
b_1 = 0.3
b_2 = 0.6
b_3 = 0.8
sig = 2
Qt  = exp(b_1*X2 + b_2*X3 + b_3*X4)
Yh = c()
for(k in 1:M){
for(i in 1:length(Qt)){Yh[i]= rtweibull(1,Qt[i],sig,t_sim[j])}
sim = data.frame(Li = ifelse(Yh < quantile(Yh,0.25),0,
ifelse(Yh <  quantile(Yh,0.5),quantile(Yh,0.25),
ifelse(Yh < quantile(Yh,0.75),quantile(Yh,0.50),quantile(Yh,0.70)))),
Ls = ifelse(Yh < quantile(Yh,0.25),quantile(Yh,0.25),
ifelse(Yh <  quantile(Yh,0.5),quantile(Yh,0.5),
ifelse(Yh < quantile(Yh,0.75),quantile(Yh,0.75),quantile(Yh,0.99)))),
X2 =X2,
X3 = X3,
X4 = X4)
fit_sim_0.5  <- append(fit_sim_0.5, list(reg_ces_wei(sim,1,2,t_sim[j])))
print(k)
}
}
reg_ces_wei = function(data, li, lf, t) {
data_l_inf = data[,li]
data_l_sup = data[, lf]
covar = as.matrix(data[, - c(li, lf)])
n = ncol(covar)
d = nrow(covar)
ll = function(param, l_inf,l_fin, t) {
b_0 = 0
b = as.matrix(rep(0, ncol(covar)))
b_0 = param[1]
for (i in 1:n) {b[i] = param[i + 1]}
sigma = param[length(param)]
ct = -(log(1-t))
qt = exp(b_0 + covar %*% b)
s_ll = 0
for (j in 1:d) {
qt_j = qt[j,]
s_ll = s_ll - log(ptweibull(data_l_sup[j], qt_j, sigma, t)- ptweibull(data_l_inf[j], qt_j, sigma, t))
}
return(s_ll)
}
lf = rowMeans(cbind(data_l_inf,data_l_sup))
inicial = c(as.vector(coef(lm(lf~covar,data=data.frame(avg=cbind(lf,covar))))),1)
fit_mv = nlminb(inicial,ll,l_inf = li, l_fin = lf,t = t,lower = c(rep(0,ncol(covar)+1,0.1)),upper =c(rep(Inf,ncol(covar)+2)))
inicial = fit_mv$par
fit_mv =   optim(par = inicial, method="L-BFGS-B",fn = ll,hessian = T, t = t, upper = c(rep(Inf, ncol(covar) + 2)),lower = c(rep(0, ncol(covar) + 1), 0.01))
return(fit_mv)
}
M = 1000
t_sim = 0.5
for(j in 1:length(t_sim)){
X2 = rbeta(10000,2,3)
X3 = rnorm(10000,3,0.5)
X4 = rgamma(10000,2,4)
b_1 = 0.3
b_2 = 0.6
b_3 = 0.8
sig = 2
Qt  = exp(b_1*X2 + b_2*X3 + b_3*X4)
Yh = c()
for(k in 1:M){
for(i in 1:length(Qt)){Yh[i]= rtweibull(1,Qt[i],sig,t_sim[j])}
sim = data.frame(Li = ifelse(Yh < quantile(Yh,0.25),0,
ifelse(Yh <  quantile(Yh,0.5),quantile(Yh,0.25),
ifelse(Yh < quantile(Yh,0.75),quantile(Yh,0.50),quantile(Yh,0.70)))),
Ls = ifelse(Yh < quantile(Yh,0.25),quantile(Yh,0.25),
ifelse(Yh <  quantile(Yh,0.5),quantile(Yh,0.5),
ifelse(Yh < quantile(Yh,0.75),quantile(Yh,0.75),quantile(Yh,0.99)))),
X2 =X2,
X3 = X3,
X4 = X4)
fit_sim_0.5  <- append(fit_sim_0.5, list(reg_ces_wei(sim,1,2,t_sim[j])))
print(k)
}
}
